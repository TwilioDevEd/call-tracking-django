.chapter(data-title='Call Tracking with Twilio and Django')
  .step(data-file='call_tracking/static/js/callTracking.js')
    :markdown
      ## What does this thing do?

      This [Django](http://djangoproject.com/) web application shows how you can
      use Twilio to track the effectiveness of different marketing channels.

      ![Call tracking home page](http://howtodocs.s3.amazonaws.com/call-tracking-home.png)

      This application has three main features:

      - It purchases phone numbers from Twilio to use in different marketing
      campaigns (like a billboard or a bus advertisement)
      - It forwards incoming calls for those phone numbers to a salesperson
      - It displays charts showing data about the phone numbers and the calls
      they receive

      In this tutorial, we'll point out the key bits of code that make this
      application work.
      [Check out the project README on GitHub](https://github.com/twiliodeved/call-tracking-django)
      to see how to run the code yourself.

      Let's get started! Click the right arrow above to advance to the next
      code snippet.

      ---

      **See also:**

      * [Twilio Python Helper Library](https://github.com/twilio/twilio-python/)
      * [Twilio REST API docs](https://www.twilio.com/docs/api)
      * [Django docs](https://docs.djangoproject.com/en/1.8/)
      * [What is Call Tracking?](http://www.searchenginejournal.com/seo-beginner-guide-call-tracking-care/83173/)

  .step(data-file='call_tracking/utils.py', data-highlight='1-18')
    :markdown
      ## Search for available phone numbers

      Call tracking requires us to search for and buy phone numbers on demand,
      associating a specific phone number with a lead source. This utility module
      uses the [twilio-python helper library](https://twilio-python.readthedocs.org/en/latest/usage/basics.html)
      to search for phone numbers by area code and return a list of numbers
      that are available for purchase.

      ---

      **See also:**

      * [twilio-python helper library basics](https://twilio-python.readthedocs.org/en/latest/usage/basics.html)
      * [Searching for and buying numbers in twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/phone-numbers.html#searching-and-buying-a-number)
      * [REST API: Available Phone Numbers](https://www.twilio.com/docs/api/rest/available-phone-numbers)

  .step(data-file='call_tracking/views.py', data-highlight='55-70')
    :markdown
      ## Display available phone numbers

      We display a form to the user on the app's home page which allows them to
      search for a new phone number by area code. At the view level, we use the
      utility module we created earlier to actually search for numbers, and display
      and HTML page to the user with a list of numbers they can choose to buy.

      ---

      **See also:**

      * [Django forms overview](https://docs.djangoproject.com/en/1.8/topics/forms/)
      * [Django messages framework](https://docs.djangoproject.com/en/1.8/ref/contrib/messages/)

  .step(data-file='call_tracking/utils.py', data-highlight='21-28')
    :markdown
      ## Buy a phone number

      Our `purchase_phone_number` utility function takes a phone number as its
      sole parameter and uses our Twilio API client to actually purchase one of
      the available phone numbers we searched for earlier.

      ---

      **See also:**

      * [Searching and Buying a Number with twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/phone-numbers.html#searching-and-buying-a-number)
      * [Twilio REST API: Available Phone Numbers](https://www.twilio.com/docs/api/rest/available-phone-numbers)

  .step(data-file='call_tracking/utils.py', data-highlight='23-26')
    :markdown
      ## Set webhook URLs in a TwiML Application

      When we purchase a phone number, we specify a voice application SID. This is
      an identifier for a [TwiML application](https://www.twilio.com/help/faq/twilio-client/how-do-i-create-a-twiml-app),
      which you can create one through the [REST API](https://www.twilio.com/docs/api/rest/applications) 
      or [account portal](https://www.twilio.com/user/account/apps).

      ![Creating a TwiML app](http://howtodocs.s3.amazonaws.com/call-tracking-twiml-app.gif)

  .step(data-file='call_tracking/views.py', data-highlight='85-99')
    :markdown
      ## Associate a phone number with a lead source

      Once we search for and buy a Twilio number, we need to associate it with a
      lead source in our database. This is the core of a call tracking application.
      Any phone calls to our new Twilio number will be attributed to this source.

      ---

      **See also:**

      * [Django forms overview](https://docs.djangoproject.com/en/1.8/topics/forms/)
      * [Django messages framework](https://docs.djangoproject.com/en/1.8/ref/contrib/messages/)
      * [Django redirect shortcut](https://docs.djangoproject.com/en/1.8/topics/http/shortcuts/#redirect)
      * [E.164 format](https://en.wikipedia.org/wiki/E.164)

  .step(data-file='call_tracking/models.py', data-highlight='22-42')
    :markdown
      ## The LeadSource model

      The `LeadSource` model associates a Twilio number to a named lead source
      (like "Wall Street Journal Ad" or "Dancing guy with sign"). It also tracks
      a phone number to which we'd like all the calls redirected, like your sales
      or support help line.

      ---

      **See also:**

      * [django-phonenumber-field for number formatting](https://github.com/stefanfoulis/django-phonenumber-field)
      * [Django Models](https://docs.djangoproject.com/en/1.8/topics/db/models/)
      * [Django @python_2_unicode_compatible decorator](https://docs.djangoproject.com/en/1.8/topics/python3/#str-and-unicode-methods)

  .step(data-file='call_tracking/models.py', data-highlight='61-76')
    :markdown
      ## The Lead model

      A `Lead` represents a phone call generated by a `LeadSource`. Each time
      somebody calls a phone number associated with a `LeadSource`, we'll use the `Lead` model to
      record some of the [data Twilio gives us](https://www.twilio.com/docs/api/twiml/twilio_request) 
      about their call.

      ---

      **See also:**

      * [Django ForeignKey relationships](https://docs.djangoproject.com/en/1.8/topics/db/examples/many_to_one/)

  .step(data-file='call_tracking/views.py', data-highlight='118-138')
    :markdown
      ## Forward calls and create leads

      Whenever a customer calls one of our Twilio numbers, Twilio will send a POST 
      request to the URL associated with this view function (should be `/call-tracking/forward-call`).

      We use the incoming call data to create a new `Lead` for a `LeadSource`,
      then return [TwiML](https://www.twilio.com/docs/api/twiml) that connects our caller
      with the `forwarding_number` of our `LeadSource`.

      ---

      **See also:**

      * [Twilio voice request parameters](https://www.twilio.com/docs/api/twiml/twilio_request)
      * [@csrf_exempt decorator](https://docs.djangoproject.com/en/1.8/ref/csrf/#edge-cases)
      * [TwiML creation with twilio-python](https://twilio-python.readthedocs.org/en/latest/usage/twiml.html)
      * [TwiML <Dial> verb](https://www.twilio.com/docs/api/twiml/dial)

  .step(data-file='call_tracking/models.py', data-highlight='7-19')
    :markdown
      ## Get statistics about our lead sources

      One useful statistic we can get from our data is how many calls each
      `LeadSource` has received. We use the Django ORM's annotate feature to make a list containing each
      `LeadSource` and a count of its `Lead` models. We create a custom model manager 
      so that we can easily access this data in our views.

      ---

      **See also:**

      * [Django custom model managers](https://docs.djangoproject.com/en/1.8/topics/db/managers/)
      * [Django annotate feature](https://docs.djangoproject.com/en/1.8/topics/db/aggregation/#generating-aggregates-for-each-item-in-a-queryset)
      * [Django queryset values() method](https://docs.djangoproject.com/en/1.8/ref/models/querysets/#values)

  .step(data-file='call_tracking/static/js/callTracking.js')
    :markdown
      ## Visualize our statistics with Chart.js

      Back on the home page, we fetch call tracking statistics 
      [in JSON from the server](https://docs.djangoproject.com/en/1.8/ref/request-response/#jsonresponse-objects) 
      using [jQuery](https://api.jquery.com/jquery.get/).
      We display the stats in colorful pie charts we create with [Chart.js](http://www.chartjs.org/). 

      ![Call tracking charts](http://howtodocs.s3.amazonaws.com/call-tracking-charts.png)

  .step(data-file='call_tracking/views.py', data-highlight='118-138')
    :markdown
      ## Where to next?

      That's it! Our Django application is now ready to purchase new phone
      numbers, forward incoming calls, and record some statistics for our
      business. 

      If you're a Python developer working with Twilio, you might also enjoy these
      tutorials:

      [**Click-To-Call (Flask)**](https://www.twilio.com/docs/howto/walkthrough/click-to-call/python/flask)

      Put a button on your web page that connects visitors to live support or sales people via telephone.

      [**Appointment Reminders (Django)**](https://www.twilio.com/docs/howto/walkthrough/appointment-reminders/python/django)

      Send your customers automatic reminders ahead of appoiments using Twilio
      SMS.

      Thanks for checking out this tutorial! If you have any feedback to share
      with us, we'd love to hear it. Tweet [@twilio](https://twitter.com/twilio)
      to let us know what you think.
